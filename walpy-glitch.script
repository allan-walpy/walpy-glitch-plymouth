#! --- image files --- #

_file;
_file.logo = "logo.png";
_file.bg_image = "background.png";
_file.progress = "progress.png";
_file.sys_message = "message.system.png";
_file.info_message = "message.info.png";
_file.password;
_file.password.bg = "password.png";

#! --- global variables --- #

_bg_z = 0;
_logo_z = 3;
_progress_z = 5;
_password_z = 15;
_message_z = 25;
_dbg_z = 100;

_bg;

_bg.color;
_bg.color.top;
_bg.color.top.r = 0.13;
_bg.color.top.g = 0.13;
_bg.color.top.b = 0.13;
_bg.color.bottom;
_bg.color.bottom.r = 0.13;
_bg.color.bottom.g = 0.13;
_bg.color.bottom.b = 0.13;

_bg.image;
_bg.image.z = _bg_z;

_text_color;
_text_color.r = 0.8;
_text_color.g = 0.8;
_text_color.b = 0.8;
_text_color.a = 1;

_font = "Monospace 32px";

_screen_width = Window.GetWidth();
_screen_height = Window.GetHeight();
_screen_x = Window.GetX();
_screen_y = Window.GetY();

_logo;
_logo.offcet = 32;

_prg;
_prg.offset;
_prg.offset.x = 0;
_prg.offset.y = -20;
_prg.dim = 0.3;

_prg.bg;
_prg.bg.z = _progress_z;

_prg.state;
_prg.state.z = _prg.bg.z + 1;
_prg.state.offset;
_prg.state.offset.x = _prg.offset.x + 0;
_prg.state.offset.y = _prg.offset.y + 0;
_prg.state.length = 42;
_prg.state.font = "Monospace 60px";
_prg.state.color;
_prg.state.color.r = 1;
_prg.state.color.g = 1;
_prg.state.color.b = 1;
_prg.state.color.a = 1;
_prg.state.prefix = "root@digital_asylum:/$ system-";
_prg.state.postfix = "";

_prg.bar;
_prg.bar.z = _prg.state.z + 1;
_prg.bar.speed = 9.0;
_prg.bar.length = 42;
_prg.bar.offset;
_prg.bar.offset.x = _prg.offset.x + 0;
_prg.bar.offset.y = _prg.state.offset.y + 64;
_prg.bar.bg = " ";
_prg.bar.strip = "<";
_prg.bar.strip_length = 2;
_prg.bar.strip_direction = 1; # 1 - to left ☭; 0 - to right;
_prg.bar.strip_spacing = 3;
_prg.bar.font = "Monospace 60px";
_prg.bar.color;
_prg.bar.color.r = 1;
_prg.bar.color.g = 1;
_prg.bar.color.b = 1;
_prg.bar.color.a = 1;

_prg.fill;
_prg.fill.z = _prg.bar.z + 1;
_prg.fill.offset;
_prg.fill.offset.x = _prg.offset.x + 0;
_prg.fill.offset.y = _prg.bar.offset.y + 64 - 5;
_prg.fill.max_length = 42;
_prg.fill.bg = "█";
_prg.fill.font = "Monospace 60px";
_prg.fill.color;
_prg.fill.color.r = 0.2;
_prg.fill.color.g = 1;
_prg.fill.color.b = 0.3;
_prg.fill.color.a = 1;

_prg.label;
_prg.label.z = _prg.fill.z + 1;
_prg.label.offset;
_prg.label.offset.x = _prg.offset.x + 0;
_prg.label.offset.y = _prg.fill.offset.y;
_prg.label.is_centered = 1;
_prg.label.max_value = 256;
_prg.label.max_length = 42;
_prg.label.prefix = "#";
_prg.label.postfix = "x";
_prg.label.font = "Monospace 60px";
_prg.label.color;
_prg.label.color.r = 1;
_prg.label.color.g = 1;
_prg.label.color.b = 1;
_prg.label.color.a = 1;

_pass;
_pass.z = _password_z;

_pass.bg;
_pass.bg.z = _pass.z;

_pass.bullets;
_pass.bullets.offset;
_pass.bullets.offset.x = 0;
_pass.bullets.offset.y = 32;
_pass.bullet.z = _pass.bg.z + 1;
_pass.bullets.filler = "●";
_pass.bullets.max_length = 20;
_pass.bullets.font = "Monospace 96px";
_pass.bullets.color;
_pass.bullets.color.r = 0;
_pass.bullets.color.g = 0;
_pass.bullets.color.b = 0;
_pass.bullets.color.a = 1;

_msg;
_msg.z = _message_z;

_msg.sys;
_msg.sys.z = _msg.z + 13;

_msg.sys.bg;
_msg.sys.bg.offset;
_msg.sys.bg.offset.x = 0;
_msg.sys.bg.offset.y = 16;
_msg.sys.bg.z = _msg.sys.z;

_msg.sys.label;
_msg.sys.label.offset;
_msg.sys.label.offset.x = 0;
_msg.sys.label.offset.y = _msg.sys.bg.offset.y + 56;
_msg.sys.label.z = _msg.sys.z + 1;
_msg.sys.label.max_length = 36;
_msg.sys.label.font = "Monospace 64px";
_msg.sys.label.color;
_msg.sys.label.color.r = 1;
_msg.sys.label.color.g = 1;
_msg.sys.label.color.b = 1;
_msg.sys.label.color.a = 1;

_msg.info;
_msg.info.z = _msg.z + 1;

_msg.info.bg;
_msg.info.bg.offset;
_msg.info.bg.offset.x = 0;
_msg.info.bg.offset.y = -16;
_msg.info.bg.z = _msg.info.z;

_msg.info.label;
_msg.info.label.offset;
_msg.info.label.offset.x = 0;
_msg.info.label.offset.y = _msg.info.bg.offset.y - 4;
_msg.info.label.z = _msg.info.z + 1;
_msg.info.label.max_length = 36;
_msg.info.label.font = "Monospace 64px";
_msg.info.label.color;
_msg.info.label.color.r = 0;
_msg.info.label.color.g = 0;
_msg.info.label.color.b = 0;
_msg.info.label.color.a = 1;

fun _get_length (string) { for (i = 0; String(string).CharAt(i); i++) { } return i; }

fun _get_center_x(width)  _screen_x + _screen_width / 2 - width / 2;
fun _get_center_y(height) _screen_y + _screen_height / 2 - height / 2;
fun _get_top(height)      _screen_y;
fun _get_bottom(height)   _screen_y + _screen_height - height;
fun _get_left(width)      _screen_x;
fun _get_right(width)     _screen_x + _screen_width - width;

fun _draw_sprite(s, x, y, z, o) { s.SetPosition(x, y, z); s.SetOpacity(o); }
fun _draw_image(i) _draw_sprite(i.sprite, i.x, i.y, i.z, i.opacity); # TODO: addd resize;
fun _to_image(text, color, font) Image.Text(text, color.r, color.g, color.b, color.a, font);
fun _get_scale(width, height) Math.Max(_screen_width / width, _screen_height / height); #! TODO: not used;

#! --- debug --- #

_dbg; _dbg.font = _font;
_dbg.color; _dbg.color.r = 1; _dbg.color.g = 1; _dbg.color.b = 1; _dbg.color.a = 1;

_dbg.a; _dbg.a.sprite = Sprite(); _dbg.a.sprite.SetPosition(0, 0, _dbg_z);
fun _debug1(text) _dbg.a.sprite.SetImage(_to_image(text, _dbg.color, _dbg.font));

_dbg.b; _dbg.b.sprite = Sprite(); _dbg.b.sprite.SetPosition(0, 32, _dbg_z);
fun _debug2(text) _dbg.b.sprite.SetImage(_to_image(text, _dbg.color, _dbg.font));

#! --- main set-ups --- #

g_ticks = 0;

Window.SetBackgroundTopColor(_bg.color.top.r, _bg.color.top.g, _bg.color.top.b);
Window.SetBackgroundBottomColor(_bg.color.bottom.r, _bg.color.bottom.g , _bg.color.bottom.b);

#! --- bacground_image ---#

bg;

bg.filename = _file.bg_image;
bg.image = Image(bg.filename);
bg.width = bg.image.GetWidth();
bg.height = bg.image.GetHeight();
bg.x = _screen_x;
bg.y = _screen_y;
bg.z = _bg.image.z;
bg.opacity = 1;
bg.sprite = Sprite(bg.image);

fun draw_bg() _draw_image(bg);
draw_bg();

#! --- logo --- #

logo;
logo.image = Image(_file.logo);
logo.width = logo.image.GetWidth();
logo.height = logo.image.GetHeight();
logo.x = _get_center_x(logo.width);
logo.y = _get_bottom(logo.height) - _logo.offcet;
logo.z = _logo_z;
logo.opacity = 1;
logo.sprite = Sprite(logo.image);

fun draw_logo() _draw_image(logo);
draw_logo();

#! --- progress;bg --- #

progress;
progress.bg;
progress.bg.image = Image(_file.progress);
progress.bg.width = progress.bg.image.GetWidth();
progress.bg.height = progress.bg.image.GetHeight();
progress.bg.x = _get_center_x(progress.bg.width);
progress.bg.y = _get_center_y(progress.bg.height);
progress.bg.z = _prg.bg.z;
progress.bg.opacity = 1;
progress.bg.sprite = Sprite(progress.bg.image);

fun draw_progress_bg() _draw_image(progress.bg);
draw_progress_bg();

#! --- progress;state --- #

fun get_progress_state_text(mode)
{
    r = _prg.state.prefix + mode +_prg.state.postfix;
    for (i = _get_length(r); i < _prg.state.length; i++) r += " ";
    return r;
}

progress.state;

progress.state.mode = Plymouth.GetMode();
progress.state.text = get_progress_state_text(progress.state.mode);
progress.state.image = _to_image(progress.state.text, _prg.state.color, _prg.state.font);
progress.state.width = progress.state.image.GetWidth();
progress.state.height = progress.state.image.GetHeight();
progress.state.x = _get_center_x(progress.state.width) + _prg.state.offset.x;
progress.state.y = _get_center_y(progress.state.height) + _prg.state.offset.y;
progress.state.z = _prg.state.z;
progress.state.opacity = 1;
progress.state.sprite = Sprite(progress.state.image);

fun draw_progress_state() _draw_image(progress.state);
draw_progress_state();

#! --- progress;bar --- #

fun get_progress_bar_text(time) {
    local.length = _prg.bar.length;
    local.s_length = _prg.bar.strip_length;
    local.direction = _prg.bar.strip_direction;
    local.spacing = _prg.bar.strip_spacing;
    local.bg = _prg.bar.bg;
    local.s = _prg.bar.strip;

    mod_length = s_length + spacing;
    shift = (time * _prg.bar.speed) % mod_length;

    r = ""; mod = 0;
    for (i = 0; i < length; i++)
    {
        mod = (shift + i) % (spacing + s_length);
        if (mod >= spacing)
            if (direction) r += s; else r = s + r;
        else
            if (direction) r += bg; else r = bg + r;
    }

    return r;
}

progress.bar;

fun set_progress_bar() {
    progress.bar.width = progress.bar.image.GetWidth();
    progress.bar.height = progress.bar.image.GetHeight();
    progress.bar.x = _get_center_x(progress.bar.width) + _prg.bar.offset.x;
    progress.bar.y = _get_center_y(progress.bar.height) + _prg.bar.offset.y;
    progress.bar.z = _prg.bar.z;
    progress.bar.opacity = 1;
}

fun draw_progress_bar() _draw_image(progress.bar);

fun update_progress_bar(time, do_set) {
    progress.bar.text = get_progress_bar_text(time);
    progress.bar.image = _to_image(progress.bar.text, _prg.bar.color, _prg.bar.font);
    if (do_set) set_progress_bar();
    progress.bar.sprite = Sprite(progress.bar.image);
    draw_progress_bar();
}

update_progress_bar(0.0, 1);

#! --- progress;filler --- #

fun get_progress_fill_text(progression) {
    r = "" ; local.length = Math.Min(Math.Int(progression * _prg.fill.max_length), _prg.fill.max_length);
    for (i = 0; i < length; i++) r += _prg.fill.bg;
    return r;
}

progress.fill;

fun set_progress_fill() {
    progress.fill.z = _prg.fill.z;
    progress.fill.opacity = 1;
}

fun draw_progress_fill() _draw_image(progress.fill);

fun update_progress_fill(progression, do_set) {
    progress.fill.text = get_progress_fill_text(progression);
    progress.fill.image = _to_image(progress.fill.text, _prg.fill.color, _prg.fill.font);
    progress.fill.width = progress.fill.image.GetWidth();
    progress.fill.height = progress.fill.image.GetHeight();
    progress.fill.x = _get_center_x(progress.fill.width) + _prg.fill.offset.x;
    progress.fill.y = _get_center_y(progress.fill.height) + _prg.fill.offset.y;
    if (do_set) set_progress_fill();
    progress.fill.sprite = Sprite(progress.fill.image);
    draw_progress_fill();
}

update_progress_fill(0.0, 1);

#! --- progress;filler;label; --- #

fun get_progress_label_text(progression) {
    number = Math.Int(progression * _prg.label.max_value) + "";
    start = _get_length(number); end = _get_length(_prg.label.max_value + "");
    for (i = start; i < end; i++) number = "0" + number;
    r = _prg.label.prefix + number  + _prg.label.postfix;
    start = _get_length(r); end = _prg.label.max_length;
    if (!_prg.label.is_centered) for (i = start; i < end; i ++) r = r + " ";
    return r;
}

progress.label;

fun set_progress_label() {
    progress.label.z = _prg.label.z;
    progress.label.opacity = 1;
}

fun draw_progress_label() _draw_image(progress.label);

fun update_progress_label(progression, do_set) {
    progress.label.text = get_progress_label_text(progression);
    progress.label.image = _to_image(progress.label.text, _prg.label.color, _prg.label.font);
    progress.label.width = progress.label.image.GetWidth();
    progress.label.height = progress.label.image.GetHeight();
    progress.label.x = _get_center_x(progress.label.width) + _prg.label.offset.x;
    progress.label.y = _get_center_y(progress.label.height) + _prg.label.offset.y;
    if (do_set) set_progress_label();
    progress.label.sprite = Sprite(progress.label.image);
    draw_progress_label();
}

update_progress_label(0.0, 1);

#! --- progress;all --- #

fun set_progress_all(opacity)
{
    progress.bg.opacity = opacity; draw_progress_bg();
    progress.bar.opacity = opacity; draw_progress_state();
    progress.state.opacity = opacity; draw_progress_state();
    progress.fill.opacity = opacity; draw_progress_fill();
    progress.label.opacity = opacity; draw_progress_label();
}

fun draw_progress_all() set_progress_all(1);
fun hide_progress_all() set_progress_all(0);
fun dim_progress_all() set_progress_all(_prg.dim);
fun undim_progress_all() set_progress_all(1);

#! --- password;bg --- #

password;
password.is_set = 0;
password.bg;

fun set_password_bg() {
    password.bg.image = Image(_file.password.bg);
    password.bg.width = password.bg.image.GetWidth();
    password.bg.height = password.bg.image.GetHeight();
    password.bg.x = _get_center_x(password.bg.width);
    password.bg.y = _get_center_y(password.bg.height);
    password.bg.z = _pass.bg.z;
    password.bg.opacity = 0;
    password.bg.sprite = Sprite(password.bg.image);
    password.is_set = 1;
}

fun draw_password_bg() _draw_image(password.bg);
fun show_password_bg() { password.bg.opacity = 1; draw_password_bg(); }
fun hide_password_bg() { password.bg.opacity = 0; draw_password_bg(); }

#! --- password;bullets --- #

fun get_password_text(count)
{
    r = "";
    for (i = 0; i < _pass.bullets.max_length; i++)
        if (i < count) r += _pass.bullets.filler; else r += " ";
    return r;
}

password.bullets;
password.bullets.is_set = 0;

fun set_password_bullets(count) {
    password.bullets.text = get_password_text(count);
    password.bullets.image = _to_image(password.bullets.text, _pass.bullets.color, _pass.bullets.font);
    password.bullets.width = password.bullets.image.GetWidth();
    password.bullets.height = password.bullets.image.GetHeight();
    password.bullets.x = _get_center_x(password.bullets.width) + _pass.bullets.offset.x;
    password.bullets.y = _get_center_y(password.bullets.height) + _pass.bullets.offset.y;
    password.bullets.z = _pass.bullet.z;
    password.bullets.opacity = 0;
    password.bullets.sprite = Sprite(password.bullets.image);
    password.is_set = 1;
}

fun draw_password_bullets() _draw_image(password.bullets);
fun show_password_bullets() { password.bullets.opacity = 1; draw_password_bullets(); }
fun hide_password_bullets() { password.bullets.opacity = 0; draw_password_bullets(); }

fun show_password_prompt(bullets) { set_password_bg(); show_password_bg(); set_password_bullets(bullets); show_password_bullets(); }
fun hide_password_prompt() if (password.is_set) { hide_password_bg();  hide_password_bullets(); }

#! --- message;system;bg --- #

message;
message.sys;
message.sys.is_set = 0;

message.sys.bg;

fun set_message_sys_bg()
{
    message.sys.bg.image = Image(_file.sys_message);
    message.sys.bg.width = message.sys.bg.image.GetWidth();
    message.sys.bg.height = message.sys.bg.image.GetHeight();
    message.sys.bg.x = _get_center_x(message.sys.bg.width) + _msg.sys.bg.offset.x;
    message.sys.bg.y = _get_top(message.sys.bg.height) + _msg.sys.bg.offset.y;
    message.sys.bg.z = _msg.sys.bg.z;
    message.sys.bg.opacity = 0;
    message.sys.bg.sprite = Sprite(message.sys.bg.image);
    message.sys.is_set = 1;
}

fun draw_message_sys_bg() _draw_image(message.sys.bg);
fun show_message_sys_bg() { message.sys.bg.opacity = 1; draw_message_sys_bg(); }
fun hide_message_sys_bg() { message.sys.bg.opacity = 0; draw_message_sys_bg(); }

#! --- message;system;label --- #

fun get_message_sys_text(prompt)
{
    r = prompt;
    for (i = _get_length(prompt); i < _msg.sys.label.max_length; i++) r += " ";
    return r;
}

message.sys.label;

fun set_message_sys_label(prompt) {
    message.sys.label.text = get_message_sys_text(prompt);
    message.sys.label.image = _to_image(message.sys.label.text, _msg.sys.label.color, _msg.sys.label.font);
    message.sys.label.width = message.sys.label.image.GetWidth();
    message.sys.label.height = message.sys.label.GetHeight();
    message.sys.label.x = _get_center_x(message.sys.label.width) + _msg.sys.label.offset.x;
    message.sys.label.y = _get_top(message.sys.label.height) + _msg.sys.label.offset.y;
    message.sys.label.z = _msg.sys.label.z;
    message.sys.label.opacity = 0;
    message.sys.label.sprite = Sprite(message.sys.label.image);
    message.sys.is_set = 1;
}

fun draw_message_sys_label() _draw_image(message.sys.label);
fun show_message_sys_label() { message.sys.label.opacity = 1; draw_message_sys_label(); }
fun hide_message_sys_label() { message.sys.label.opacity = 0; draw_message_sys_label(); }

fun show_message_sys_prompt(prompt) {
    set_message_sys_bg(); show_message_sys_bg();
    set_message_sys_label(prompt); show_message_sys_label();
}
fun hide_message_sys_prompt() if (message.sys.is_set) { hide_message_sys_bg(); hide_message_sys_label(); }

#! --- message;info;bg ---#

message.info;
message.info.is_set = 0;

message.info.bg;

fun set_message_info_bg()
{
    message.info.bg.image = Image(_file.info_message);
    message.info.bg.width = message.info.bg.image.GetWidth();
    message.info.bg.height = message.info.bg.image.GetHeight();
    message.info.bg.x = _get_center_x(message.info.bg.width) + _msg.info.bg.offset.x;
    message.info.bg.y = _get_bottom(message.info.bg.height) + _msg.info.bg.offset.y;
    message.info.bg.z = _msg.info.bg.z;
    message.info.bg.opacity = 0;
    message.info.bg.sprite = Sprite(message.info.bg.image);
    message.info.is_set = 1;
}

fun draw_message_info_bg() _draw_image(message.info.bg);
fun show_message_info_bg() { message.info.bg.opacity = 1; draw_message_info_bg(); }
fun hide_message_info_bg() { message.info.bg.opacity = 0; draw_message_info_bg(); }

set_message_info_bg();
show_message_info_bg();

#! --- message;info;label --- #

fun get_message_info_text(msg)
{
    r = msg;
    for (i = _get_length(msg); i < _msg.info.label.max_length; i++) r += "-";
    return r;
}

message.info.label;

fun set_message_info_label(msg) {
    message.info.label.text = get_message_info_text(msg);
    message.info.label.image = _to_image(message.info.label.text, _msg.info.label.color, _msg.info.label.font);
    message.info.label.width = message.info.label.image.GetWidth();
    message.info.label.height = message.info.label.GetHeight();
    message.info.label.x = _get_center_x(message.info.label.width) + _msg.info.label.offset.x;
    message.info.label.y = _get_bottom(message.info.label.height) + _msg.info.label.offset.y;
    message.info.label.z = _msg.info.label.z;
    message.info.label.opacity = 0;
    message.info.label.sprite = Sprite(message.info.label.image);
    message.info.is_set = 1;
}

fun draw_message_info_label() _draw_image(message.info.label);
fun show_message_info_label() { message.info.label.opacity = 1; draw_message_info_label(); }
fun hide_message_info_label() { message.info.label.opacity = 0; draw_message_info_label(); }

fun show_message_info_prompt(msg) {
    set_message_info_bg(); show_message_info_bg();
    set_message_info_label(msgt); show_message_info_label();
}
fun hide_message_info_prompt() if (message.info.is_set) { hide_message_info_bg(); hide_message_info_label(); }


#! --- callback --- #

fun refresh_callback() g_ticks++;
Plymouth.SetRefreshFunction(refresh_callback);

fun boot_progress_callback(duration, progression)
{
    update_progress_bar(duration, 0);
    update_progress_fill(progression, 0);
    update_progress_label(progression, 0);
}
Plymouth.SetBootProgressFunction(boot_progress_callback);

fun display_password_callback(prompt, bullets)
{
    dim_progress_all();
    show_password_prompt(bullets);
    show_message_sys_prompt(prompt);
    show_message_info_prompt("hey, how are you?");
}
Plymouth.SetDisplayPasswordFunction(display_password_callback);

fun display_normal_callback()
{
    hide_password_prompt();
    hide_message_sys_prompt();
    hide_message_info_prompt();
    undim_progress_all();
}
Plymouth.SetDisplayNormalFunction(display_normal_callback);

fun quit_callback()
{
    bg.opacity = 0; draw_bg();
    hide_progress_all();
}
Plymouth.SetQuitFunction(quit_callback);

#!___ tmp ___!#

fun dummy() {}
fun dummy1(a) {}
fun dummy2(a, b) {}

# fun root_mounted_callback() {
#     draw_message_sys();
# }
# Plymouth.SetRootMountedFunction(root_mounted_callback);

Plymouth.SetDisplayQuestionFunction(dummy2);
Plymouth.SetDisplayMessageFunction(dummy1);
Plymouth.SetHideMessageFunction(dummy1);
Plymouth.SetMessageFunction(dummy1);
Plymouth.SetUpdateStatusFunction(dummy1); # * for debug;
# * Plymouth.SetKeyboardInputFunction;
