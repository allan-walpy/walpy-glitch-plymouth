#! --- image files --- #

_file;
_file.logo = "logo.png";
_file.bg_image = "background.png";
_file.progress = "progress.png";

#! --- global variables --- #

_bg_color;
_bg_color.top;
_bg_color.top.r = 0.13;
_bg_color.top.g = 0.13;
_bg_color.top.b = 0.13;
_bg_color.bottom;
_bg_color.bottom.r = 0.13;
_bg_color.bottom.g = 0.13;
_bg_color.bottom.b = 0.13;

_text_color;
_text_color.r = 0.8;
_text_color.g = 0.8;
_text_color.b = 0.8;
_text_color.a = 1;

_font = "Monospace 24";

_screen_width = Window.GetWidth();
_screen_height = Window.GetHeight();
_screen_x = Window.GetX();
_screen_y = Window.GetY();

_offcet = Math.Int(_screen_width / 84);

_bg_z = 0;
_logo_z = 1;
_progress_z = 5;
_dbg_z = 100;

_prg;
_prg.offset;
_prg.offset.x = 0;
_prg.offset.y = -20;

_prg.bar;
_prg.bar.z = _progress_z + 1;
_prg.bar.speed = 9.0;
_prg.bar.length = 39;
_prg.bar.offset;
_prg.bar.offset.x = _prg.offset.x + 0;
_prg.bar.offset.y = _prg.offset.y + 64;
_prg.bar.bg = "-";
_prg.bar.strip = "<";
_prg.bar.strip_length = 2;
_prg.bar.strip_direction = 1; # 1 -to left ☭; 0 - to right;
_prg.bar.strip_spacing = 3;
_prg.bar.font = "Monospace 48";
_prg.bar.color;
_prg.bar.color.r = 1;
_prg.bar.color.g = 1;
_prg.bar.color.b = 1;
_prg.bar.color.a = 1;

_prg.fill;
_prg.fill.z = _prg.bar.z + 1;
_prg.fill.offset;
_prg.fill.offset.x = _prg.offset.x + 0;
_prg.fill.offset.y = _prg.bar.offset.y + 64 + 8;
_prg.fill.max_length = 53;
_prg.fill.bg = "█";
_prg.fill.font = "Monospace 36";
_prg.fill.color;
_prg.fill.color.r = 0.2;
_prg.fill.color.g = 1;
_prg.fill.color.b = 0.3;
_prg.fill.color.a = 1;

_prg.label;
_prg.label.z = _prg.fill.z + 1;
_prg.label.offset;
_prg.label.offset.x = _prg.offset.x + 0;
_prg.label.offset.y = _prg.fill.offset.y + 3;
_prg.label.max_value = 256;
_prg.label.prefix = "process://loading --stage ";
_prg.label.postfix = " --max " + _prg.label.max_value;
_prg.label.font = "Monospace 24";
_prg.label.color;
_prg.label.color.r = 1;
_prg.label.color.g = 1;
_prg.label.color.b = 1;
_prg.label.color.a = 1;

fun _get_center_x(width)  _screen_x + _screen_width / 2 - width / 2;
fun _get_center_y(height) _screen_y + _screen_height / 2 - height / 2;
fun _get_top(height)      _screen_y;
fun _get_bottom(height)   _screen_y + _screen_height - height;
fun _get_left(width)      _screen_x;
fun _get_right(width)     _screen_x + _screen_width - width;

fun _draw_sprite(s, x, y, z, o) { s.SetPosition(x, y, z); s.SetOpacity(o); }
fun _draw_image(i) _draw_sprite(i.sprite, i.x, i.y, i.z, i.opacity);
fun _to_image(text, color, font) Image.Text(text, color.r, color.g, color.b, color.a, font);
fun _get_scale(width, height) Math.Max(_screen_width / width, _screen_height / height);

#! --- debug --- #

_dbg; _dbg.font = _font;
_dbg.color; _dbg.color.r = 1; _dbg.color.g = 1; _dbg.color.b = 1; _dbg.color.a = 1;

_dbg.a; _dbg.a.sprite = Sprite(); _dbg.a.sprite.SetPosition(0, 0, _dbg_z);
fun _debug1(text) _dbg.a.sprite.SetImage(_to_image(text, _dbg.color, _dbg.font));

_dbg.b; _dbg.b.sprite = Sprite(); _dbg.b.sprite.SetPosition(0, 32, _dbg_z);
fun _debug2(text) _dbg.b.sprite.SetImage(_to_image(text, _dbg.color, _dbg.font));

fun _debug(text) _debug1(text);

#! --- main set-ups --- #

Window.SetBackgroundTopColor(_bg_color.top.r, _bg_color.top.g, _bg_color.top.b);
Window.SetBackgroundBottomColor(_bg_color.bottom.r, _bg_color.bottom.g , _bg_color.bottom.b);

#! --- bacground_image ---#

bg;
bg.image = Image(_file.bg_image);
bg.scale = _get_scale(bg.image.GetWidth(), bg.image.GetHeight());
bg.width = bg.image.GetWidth() * bg.scale;
bg.height = bg.image.GetHeight() * bg.scale;
bg.image = bg.image.Scale(bg.width, bg.height);
bg.x = _screen_x;
bg.y = _screen_y;
bg.z = _bg_z;
bg.opacity = 1;
bg.sprite = Sprite(bg.image);

fun draw_bg() _draw_image(bg);
draw_bg();

#! --- logo --- #

logo;
logo.image = Image(_file.logo);
logo.width = logo.image.GetWidth();
logo.height = logo.image.GetHeight();
logo.x = _get_center_x(logo.width);
logo.y = _get_bottom(logo.height) - _offcet * 2;
logo.z = _logo_z;
logo.opacity = 1;
logo.sprite = Sprite(logo.image);

fun draw_logo() _draw_image(logo);
draw_logo();

#! --- progress --- #

progress;
progress.image = Image(_file.progress);
progress.width = progress.image.GetWidth();
progress.height = progress.image.GetHeight();
progress.x = _get_center_x(progress.width);
progress.y = _get_center_y(progress.height);
progress.z = _progress_z;
progress.opacity = 1;
progress.sprite = Sprite(progress.image);

fun draw_progress() _draw_image(progress);
draw_progress();

#! --- ptogress;bar --- #

fun get_progress_bar_text(time) {
    local.length = _prg.bar.length;
    local.s_length = _prg.bar.strip_length;
    local.direction = _prg.bar.strip_direction;
    local.spacing = _prg.bar.strip_spacing;
    local.bg = _prg.bar.bg;
    local.s = _prg.bar.strip;

    mod_length = s_length + spacing;
    shift = (time * _prg.bar.speed) % mod_length;

    r = ""; mod = 0;
    for (i = 0; i < length; i++)
    {
        mod = (shift + i) % (spacing + s_length);
        if (mod >= spacing)
            if (direction) r += s; else r = s + r;
        else
            if (direction) r += bg; else r = bg + r;
    }

    return r;
}

progress.bar;

fun set_progress_bar() {
    progress.bar.width = progress.bar.image.GetWidth();
    progress.bar.height = progress.bar.image.GetHeight();
    progress.bar.x = _get_center_x(progress.bar.width) + _prg.bar.offset.x;
    progress.bar.y = _get_center_y(progress.bar.height) + _prg.bar.offset.y;
    progress.bar.z = _prg.bar.z;
    progress.bar.opacity = 1;
}

fun draw_progress_bar() _draw_image(progress.bar);

fun update_progress_bar(time, do_set) {
    progress.bar.text = get_progress_bar_text(time);
    progress.bar.image = _to_image(progress.bar.text, _prg.bar.color, _prg.bar.font);
    if (do_set) set_progress_bar();
    progress.bar.sprite = Sprite(progress.bar.image);
    draw_progress_bar();
}

update_progress_bar(0.0, 1);

#! --- progress;filler --- #

fun get_progress_fill_text (progression) {
    r = "" ; local.length = Math.Min(Math.Int(progression * _prg.fill.max_length), _prg.fill.max_length);
    for (i = 0; i < length; i++) r += _prg.fill.bg;
    return r;
}

progress.fill;

fun set_progress_fill() {
    progress.fill.z = _prg.fill.z;
    progress.fill.opacity = 1;
}

fun draw_progress_fill() _draw_image(progress.fill);

fun update_progress_fill(progression, do_set) {
    progress.fill.text = get_progress_fill_text(progression);
    progress.fill.image = _to_image(progress.fill.text, _prg.fill.color, _prg.fill.font);
    progress.fill.width = progress.fill.image.GetWidth();
    progress.fill.height = progress.fill.image.GetHeight();
    progress.fill.x = _get_center_x(progress.fill.width) + _prg.fill.offset.x;
    progress.fill.y = _get_center_y(progress.fill.height) + _prg.fill.offset.y;
    if (do_set) set_progress_fill();
    progress.fill.sprite = Sprite(progress.fill.image);
    draw_progress_fill();
}

update_progress_fill(0.0, 1);

#! --- progress;filler;label; --- #

fun get_progress_label_text (progression)  _prg.label.prefix + (Math.Int(progression * _prg.label.max_value))  + _prg.label.postfix;

progress.label;

fun set_progress_label() {
    progress.label.z = _prg.label.z;
    progress.label.opacity = 1;
}

fun draw_progress_label() _draw_image(progress.label);

fun update_progress_label(progression, do_set) {
    progress.label.text = get_progress_label_text(progression);
    progress.label.image = _to_image(progress.label.text, _prg.label.color, _prg.label.font);
    progress.label.width = progress.label.image.GetWidth();
    progress.label.height = progress.label.image.GetHeight();
    progress.label.x = _get_center_x(progress.label.width) + _prg.label.offset.x;
    progress.label.y = _get_center_y(progress.label.height) + _prg.label.offset.y;
    if (do_set) set_progress_label();
    progress.label.sprite = Sprite(progress.label.image);
    draw_progress_label();
}

update_progress_label(0.0, 1);



#! --- callback --- #

fun refresh_callback()
{
    draw_bg();
    draw_logo();
    draw_progress();
    draw_progress_bar();
    draw_progress_fill();
    draw_progress_label();
}
Plymouth.SetRefreshFunction(refresh_callback);

fun boot_progress_callback(duration, progression)
{
    update_progress_bar(duration, 0);
    update_progress_fill(progression, 0);
    update_progress_label(progression, 0);
}
Plymouth.SetBootProgressFunction(boot_progress_callback);

#!___ tmp ___!#

fun dummy() {}
fun dummy1(a) {}
fun dummy2(a, b) {}

Plymouth.SetDisplayNormalFunction(dummy);
Plymouth.SetDisplayQuestionFunction(dummy2);
Plymouth.SetDisplayPasswordFunction(dummy2);
Plymouth.SetDisplayMessageFunction(dummy1);
Plymouth.SetHideMessageFunction(dummy1);
Plymouth.SetMessageFunction(dummy1);
Plymouth.SetUpdateStatusFunction(dummy1);
Plymouth.SetQuitFunction(dummy);
